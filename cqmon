#!/bin/sh
# CQ Unix Toolkit
# Copyright (C) 2013 Cognifide Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
_usage()
{
    cat << EOT
Usage: $(basename "${0}") [OPTION...]
Monitor Sling and CQ critical measures and indicators like number of requests,
duration, repository sessions, replication queues.

Examples:
  cqmon -u admin -r publish        # Return replication status for 'publish'
                                   # replication queue using 'admin' username
  cqmon -u admin -p passw0rd -s    # Return Sling instance requests status
                                   # and statistics like avg request duration,
                                   # total number of requests with custom
                                   # credentials 'admin' and 'passw0rd' for
                                   # local instance
  cqmon -u admin -p passw0rd -S    # Return number of currently opened JCR
        -i http://10.0.0.1:5510    # sessions (repository sessions) on
                                   # instance located at 10.0.0.1 on port 5510
                                   # using custom credentials


Options:

  -u                    use specified username for connection
  -p                    use provided password for authentication
  -i                    use specified instance URL to connect
  -r AGENTID            show agent queue stats.
                        Use:
                          cqjcr [CQ OPTIONS] -l /etc/replication/agents.author
                        for list of replication agents on author.
                        Use:
                          cqjcr [CQ OPTIONS] -l /etc/replication/agents.publish
                        for list of replication agents on publish.
  -m                    machine-friendly mode
  -s                    sling stats
  -S                    current jcr sessions
EOT
exit 1
}


_jcr_sessions() 
{
    JMX="/system/console/jmx/com.adobe.granite%3Aname%3DSESSION_COUNT%2Ctype%3DTimeSeries"
    REFERER="${instance}${JMX}"
    AUTH="${username}:${password}"
    FILEPATH="${JMX}"
    REFERERHEADER="Referer: ${REFERER}"

    STATUS=$(${CURLBIN} \
        -s \
        --write-out "\n%{http_code}\n" \
        -u "${AUTH}" \
        -H "${REFERERHEADER}" \
        "${instance}${FILEPATH}")

    EXITCODE=${?}
    "${API}" -C ${EXITCODE}
    if [ ${EXITCODE} -ne 0 ]
    then
        exit ${EXITCODE}
    fi
    STATUSCODE=$(echo "${STATUS}" | grep -o -E '^[0-9]{3}$' | tail -n 1)
    "${API}" -H "${STATUSCODE}"
    EXITCODE2=${?}
    if [ ${EXITCODE2} -ne 0 ]
    then
        exit ${EXITCODE2}
    fi
    STATUS=$(echo "${STATUS}" | sed '$d')
    VAR="ValuePerSecond"
    ARR="[0-9\", ]*"
    REGEXP="${TR}${TD}${VAR}${NTD}${TD}(${ARR})${NTD}${NTR}"
    SESSIONS=$(echo "${STATUS}" | tr -d '\n' | grep -E "${REGEXP}" | \
        ${SEDX} "s#.*${REGEXP}.*#\1#")
    SESSION=$(echo "${SESSIONS}" | tr -d ' ' | tr ',' '\n' | tail -1)
    echo ${SESSION}
    exit 0
}

_sling_stats() 
{
    JMX="/system/console/jmx/org.apache.sling%3Aservice%3DRequestProcessor%2Ctype%3Dengine"
    REFERER="${instance}${JMX}"
    AUTH="${username}:${password}"
    FILEPATH="${JMX}"
    REFERERHEADER="Referer: ${REFERER}"

    STATUS=$(${CURLBIN} \
        -s \
        --write-out "\n%{http_code}\n" \
        -u "${AUTH}" \
        -H "${REFERERHEADER}" \
        "${instance}${FILEPATH}")

    EXITCODE=${?}
    "${API}" -C ${EXITCODE}
    if [ ${EXITCODE} -ne 0 ]
    then
        exit ${EXITCODE}
    fi
    STATUSCODE=$(echo "${STATUS}" | grep -E '^[0-9]{3}$' | tail -n 1)
    "${API}" -H "${STATUSCODE}"
    EXITCODE2=${?}
    if [ ${EXITCODE2} -ne 0 ]
    then
        exit ${EXITCODE2}
    fi
    STATUS=$(echo "${STATUS}" | sed '$d')
    NUM="[-0-9\.NaN]*"
    VAR1="${TR}${TD}StandardDeviationDurationMsec${NTD}${TD}(${NUM})${NTD}${NTR}"
    VAR2="${TR}${TD}RequestsCount${NTD}${TD}(${NUM})${NTD}${NTR}"
    VAR3="${TR}${TD}MinRequestDurationMsec${NTD}${TD}(${NUM})${NTD}${NTR}"
    VAR4="${TR}${TD}MaxRequestDurationMsec${NTD}${TD}(${NUM})${NTD}${NTR}"
    VAR5="${TR}${TD}MeanRequestDurationMsec${NTD}${TD}(${NUM})${NTD}${NTR}"
    V1=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR1}" | \
        ${SEDX} "s#.*${VAR1}.*#\1#")
    V2=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR2}" | \
        ${SEDX} "s#.*${VAR2}.*#\1#")
    V3=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR3}" | \
        ${SEDX} "s#.*${VAR3}.*#\1#")
    V4=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR4}" | \
        ${SEDX} "s#.*${VAR4}.*#\1#")
    V5=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR5}" | \
        ${SEDX} "s#.*${VAR5}.*#\1#")
    
    row1=$(printf "Number of requests\t%s" "${V2}")
    row2=$(printf "Min duration in miliseconds\t%s" "${V3}")
    row3=$(printf "Max duration in miliseconds\t%s" "${V4}")
    row4=$(printf "StdDev duration in miliseconds\t%s" "${V1}")
    row5=$(printf "Mean duration in miliseconds\t%s" "${V5}")
    output=$(printf "%s\n%s\n%s\n%s\n%s\n" "${row1}" "${row2}" "${row3}" \
        "${row4}" "${row5}")
    printf "${output}" | ${API} -F "${machine_friendly}"

    exit 0
}

_replication_queue() 
{
    JMXPATH="/system/console/jmx"
    JMX="${JMXPATH}/com.adobe.granite.replication%3Aid%3D\"${1}\"%2Ctype%3Dagent"
    REFERER="${instance}${JMX}"
    AUTH="${username}:${password}"
    FILEPATH="${JMX}"
    REFERERHEADER="Referer: ${REFERER}"

    STATUS=$(${CURLBIN} \
        -s \
        --write-out "\n%{http_code}\n" \
        -u "${AUTH}" \
        -H "${REFERERHEADER}" \
        "${instance}${FILEPATH}")

    EXITCODE=${?}
    "${API}" -C ${EXITCODE}
    if [ ${EXITCODE} -ne 0 ]
    then
        exit ${EXITCODE}
    fi
    STATUSCODE=$(echo "${STATUS}" | grep -o -E '^[0-9]{3}$' | tail -n 1)
    "${API}" -H "${STATUSCODE}"
    EXITCODE2=${?}
    if [ ${EXITCODE2} -ne 0 ]
    then
        exit ${EXITCODE2}
    fi
    STATUS=$(echo "${STATUS}" | sed '$d')
    CHR="[-0-9\nA-Za-z:\+ _%!@]*"
    FORM="<form[^<]*>.*</form>"
    NULL="<null>"
    VAR1="${TR}${TD}Id${NTD}${TD}(${CHR})${NTD}${NTR}"
    VAR2="${TR}${TD}Valid${NTD}${TD}(${CHR})${NTD}${NTR}"
    VAR3="${TR}${TD}Enabled${NTD}${TD}(${CHR})${NTD}${NTR}"
    VAR4="${TR}${TD}QueueBlocked${NTD}${TD}(${CHR})${NTD}${NTR}"
    VAR5="${TR}${TD}QueuePaused${NTD}${TD}(${CHR})${FORM}${NTD}${NTR}"
    VAR6="${TR}${TD}QueueNumEntries${NTD}${TD}(${CHR})${NTD}${NTR}"
    VAR7="${TR}${TD}QueueStatusTime${NTD}${TD}(${CHR})${NTD}${NTR}"
    VAR8="${TR}${TD}QueueNextRetryTime${NTD}${TD}(${CHR})(${NULL})?${NTD}${NTR}"
    VAR9="${TR}${TD}QueueProcessingSince${NTD}${TD}(${CHR})(${NULL})?${NTD}${NTR}"
    VAR10="${TR}${TD}QueueLastProcessTime${NTD}${TD}(${CHR})(${NULL})?${NTD}${NTR}"    
    V1=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR1}" | \
        ${SEDX} "s#.*${VAR1}.*#\1#")
    V2=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR2}" | \
        ${SEDX} "s#.*${VAR2}.*#\1#")
    V3=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR3}" | \
        ${SEDX} "s#.*${VAR3}.*#\1#")
    V4=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR4}" | \
        ${SEDX} "s#.*${VAR4}.*#\1#")
    V5=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR5}" | \
        ${SEDX} "s#.*${VAR5}.*#\1#")
    V6=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR6}" | \
        ${SEDX} "s#.*${VAR6}.*#\1#")
    V7=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR7}" | \
        ${SEDX} "s#.*${VAR7}.*#\1#")
    V8=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR8}" | \
        ${SEDX} "s#.*${VAR8}.*#\1#")
    V9=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR9}" | \
        ${SEDX} "s#.*${VAR9}.*#\1#")
    V10=$(echo "${STATUS}" | tr -d '\n' | grep -E "${VAR10}" | \
        ${SEDX} "s#.*${VAR10}.*#\1#")
    row1=$(printf "ID\t%s" "${V1}")
    row2=$(printf "Valid?\t%s" "${V2}")
    row3=$(printf "Enabled\t%s" "${V3}")
    row4=$(printf "Blocked\t%s" "${V4}")
    row5=$(printf "Paused\t%s" "${V5}")
    row6=$(printf "Entries\t%s" "${V6}")
    row7=$(printf "Status time\t%s" "${V7}")
    row8=$(printf "Next retry time\t%s" "${V8}")
    row9=$(printf "Processing since\t%s" "${V9}")
    row10=$(printf "Last processing time\t%s" "${V10}")
    output=$(printf "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n" "${row1}" \
        "${row2}" "${row3}" "${row4}" "${row5}" "${row6}" "${row7}" \
        "${row8}" "${row9}" "${row10}")
    printf "%s" "${output}" | ${API} -F "${machine_friendly}"
    exit 0
}


CWD=$(dirname "${0}")
API="${CWD}/cqapi"
"${API}" -P >/dev/null
if [ ${?} -ne 0 ]
then
    echo "Fatal: cannot find or test cqapi command" >&2
    exit 1
fi

CURLBIN=$("${API}" -c)
if [ ${?} -ne 0 ]
then
    echo "Fatal: cannot find curl" >&2
    exit 1
fi

SEDX=$("${API}" -s)

# API common options
cmdapi=$("${API}" -P "${@}")
username=$(echo "${cmdapi}" | cut -f1)
password=$(echo "${cmdapi}" | cut -f2)
instance=$(echo "${cmdapi}" | cut -f3)
passed=$(echo "${cmdapi}" | cut -f4)
apigetopts=$(echo "${cmdapi}" | cut -f5)

machine_friendly=0
mode=""
while getopts ":r:mSs${apigetopts}" opt
do
    case "${opt}" in
        r)
            agent="${OPTARG}"
            mode="r";;
        m)
            machine_friendly=1;;
        s)
            mode="s";;
        S)
            mode="S";;
        \?)
            echo "Invalid option: -${OPTARG}" >&2; _usage;;
        :)
            echo "Option -${OPTARG} requires an argument." >&2; _usage;;
  esac
done
shift $((OPTIND-1))

if [ ${#} -gt 0 -o "${passed}" -eq 0 ]
then
    echo "You need to choose one of the following operation:" >&2
    echo " -r / -s / -S" >&2
    _usage
fi

AUTH="${username}:${password}"

TR="<tr[^>]*>"
TD="<td[^>]*>"
NTD="</td>"
NTR="</tr>"

case "${mode}" in
    r) _replication_queue "${agent}";;
    s) _sling_stats;;
    S) _jcr_sessions;;
esac

echo "You need to choose one of the following operation:" >&2
echo " -r / -s / -S" >&2

