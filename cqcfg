#!/bin/sh
# CQ Unix Toolkit
# Copyright (C) 2013 Cognifide Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
_usage()
{
    cat << EOT
Usage: `basename "${0}"` [OPTION...] [configuration-id]
Return CQ instance OSGI configurations in pretty-printed form using instance 
URL. For specified configuration return details and parametrs.

TBD:
Examples:
  cqosgi -u admin                 # Returns JSON data with bundle states from 
                                  # the local instance
  cqosgi -i http://localhost:5510 # Returns JSON data with bundle states for
         -p secret                # localhost instance on tcp port 5510 with
                                  # password provided: secret
  cqosgi -u admin                 # Stop davex bundle on local instance
         -s org.apache.sling.jcr.davex

  cqosgi -u admin                 # Restart davex bundle on local instance
         -s org.apache.sling.jcr.davex
         -r org.apache.sling.jcr.davex

TBD:
Options:

  -u                    use specified username for connection
  -p                    use provided password for authentication
  -i                    use specified instance URL to connect
  -j                    returns bundles states report in original JSON form
  -m                    returns bundles states report in machine-friendly form
                        (fields separated by tabs) without header
  -r                    run (start) specified bundle (using bundle symbol)
  -s                    stop specified bundle (using bundle symbol)
EOT
exit 1
}

_list_configurations()
{
    FILEPATH="/system/console/components.json"
    URL="${instance}${FILEPATH}"
    REFERERHEADER="Referer: ${URL}"

    STATUS=`${CURLBIN} \
        -s \
        --write-out "%{http_code}" \
        -u "${AUTH}" \
        -H "${REFERERHEADER}" \
        "${URL}"`

    EXITCODE=${?}
    "${API}" -C ${EXITCODE}
    if [ ${EXITCODE} -ne 0 ]
    then
        exit ${EXITCODE}
    fi
    STATUSCODE=`echo "$STATUS"|grep -o -E '[0-9]{3}'|tail -n 1`
    "${API}" -H ${STATUSCODE}
    EXITCODE2=$?
    if [ ${EXITCODE2} -ne 0 ]
    then
        exit ${EXITCODE2}
    fi
    CONFIG_REGEXP='"configurable":"([^"]+)"'
    STATUS=`echo "${STATUS}"|sed -r 's#[0-9]{3}$##'`
    CLEARED_STATUS=`echo "${STATUS}" | sed -r 's#\{#\n{#g' | \
        grep -E -o "${CONFIG_REGEXP}" | sed -r "s#${CONFIG_REGEXP}#\1#"`
    echo "${CLEARED_STATUS}"
    exit 0
}

_print_general_info()
{
    DETAILS=`echo "${STATUS}" | sed -r "s#${PROP_REGEXP}#\1\3#"`
    D1='"pid":"([^"]*)"'
    D2='"title":"([^"]*)"'
    D3='"description":"([^"]*)"'
    D4='"bundleLocation":"([^"]*)"'
    PID=`echo "${DETAILS}" | grep -E -o "${D1}" | sed -r "s#.*${D1}.*#\1#"`
    TITLE=`echo "${DETAILS}" | grep -E -o "${D2}" | sed -r "s#.*${D2}.*#\1#"`
    DESCRIPTION=`echo "${DETAILS}" | grep -E -o "${D3}" \
        | sed -r "s#.*${D3}.*#\1#"`
    BUNDLE=`echo "${DETAILS}" | grep -E -o "${D4}" | sed -r "s#.*${D4}.*#\1#"`
    output="PID\t${PID}\n"
    output="${output}TITLE\t${TITLE}\n"
    output="${output}DESCRIPTION\t${DESCRIPTION}\n"
    output="${output}BUNDLE\t${BUNDLE}\n"

    if [ ${machine_friendly} -eq 0 -o ${info} -eq 1 ]
    then 
        echo "${output}" | _format_output ${machine_friendly}
    fi
}

_print_properties()
{
    PROP_ENTRY_REGEXP='("[^"]+":\{"name":)'
    PROP_ENTRIES=`echo "${PROPERTIES}" | sed -r "s#${PROP_ENTRY_REGEXP}#\n\1#g"`
    
    PR12='"([^"]+)":\{"name":"([^"]*)",'
    PR3='"type":(.*),'
    PR3S='"type":([0-9]+),'
    PR3A='"type":(1),'
    PR4='"value":"([^"]*)"'
    PR4N='"value":([^,"]*)'
    PR4A='"values":(\[[^\x5D]*\])'
    PR5=',"description":"([^"]*)"}'
    
    VALUES_RG='\{"labels":\[.*\],"values":(\[.*\])\},?'
    SWAPRG='(.*)\t(.*)\t(.*)\t(.*)\t(.*)}?'
    TYPE_ID_RG='(.*)\t(.*)\t(.*)\t(.*)\t([0-9]+,?).*'
    PROPS_BASIC_ROWS=`echo "${PROP_ENTRIES}" | \
        grep -E "${PR12}" \
        | sed -r "s#${PR12}${PR3S}${PR4}${PR5}#\1\t\4\t\2\t\5\t\3#" \
        | sed -r "s#${PR12}${PR3}${PR4N}${PR5}#\1\t\4\t\2\t\5\t\3#" \
        | sed -r "s#${PR12}${PR3A}${PR4A}${PR5}#\1\t\4\t\2\t\5\t\3#" \
        | sed -r "s#${PR12}${PR3}${PR4A}${PR5}#\1\t\4\t\2\t\5\t\3#" \
        | sed -r "s#${PR12}${PR3}${PR4}${PR5}#\1\t\4\t\2\t\5\t\3#" \
        | sed -r "s#${PR12}${PR3S}${PR4}#\1\t\4\t\2\t\t\3#" \
        | sed -r "s#${PR12}${PR3}${PR4N}#\1\t\4\t\2\t\t\3#" \
        | sed -r "s#${PR12}${PR3A}${PR4A}#\1\t\4\t\2\t\t\3#" \
        | sed -r "s#${PR12}${PR3}${PR4A}#\1\t\4\t\2\t\t\3#" \
        | sed -r "s#${PR12}${PR3}${PR4}#\1\t\4\t\2\t\t\3#" \
        | sed -r "s#${VALUES_RG}#\1#" \
        | sed -r "s#${TYPE_ID_RG}#\1\t\2\t\3\t\4\t#" \
        | sed -r "s#${SWAPRG}#\1\t\2\t\3\t\5\t\4#" \
        | sed -r 's#%22#"#g'`
    output="ID\tVALUE\tNAME\tVALUES\tDESCRIPTION\n${PROPS_BASIC_ROWS}"
    if [ ${long} -eq 0 ]
    then
        output=`${ECHO} "${output}" | cut -f1-4`
    fi
    if [ ${machine_friendly} -eq 0 -o ${info} -eq 0 ]
    then 
        echo "${output}" | _format_output ${machine_friendly}
    fi
}

_print_configuration()
{
    FILEPATH="/system/console/configMgr/${config_id}"
    URL="${instance}${FILEPATH}"
    REFERERHEADER="Referer: ${URL}"

    STATUS=`${CURLBIN} \
        -s \
        --write-out "%{http_code}" \
        -u "$AUTH" \
        -H "$REFERERHEADER" \
        -X POST \
        "$instance${FILEPATH}"`

    EXITCODE=${?}
    "${API}" -C $EXITCODE
    if [ ${EXITCODE} -ne 0 ]
    then
        exit ${EXITCODE}
    fi
    STATUSCODE=`echo "${STATUS}"|grep -o -E '[0-9]{3}'|tail -n 1`
    "${API}" -H ${STATUSCODE}
    EXITCODE2=$?
    if [ ${EXITCODE2} -ne 0 ]
    then
        exit ${EXITCODE2}
    fi
    
    ECHO=`which echo`
    [ $? -ne 0 -o -z "$ECHO" ] && ECHO="echo" || ECHO="$ECHO -e "
    TAB=`$ECHO "\t"`

    STATUS=`echo "${STATUS}" | sed -r 's#[0-9]{3}$##; s#\\\"#%22#g'`
    PROP_REGEXP='(.*)"properties":\{(.+})}(.*)'
    PROPERTIES=`echo "${STATUS}" | grep -E -o "${PROP_REGEXP}" | \
        sed -r "s#${PROP_REGEXP}#\2#" `
    
    _print_general_info

    if [ ${machine_friendly} -eq 0 ]
    then
       ${ECHO} -e "\n\n"
    fi

    _print_properties
}

_modify_configuration()
{
    echo "modify"
    # http://localhost:5410/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask?apply=true&action=ajaxConfigManager&scheduler.expression=23+16+*+*+*+%3F&propertylist=scheduler.expression
}

_format_output() 
{
    SEP='|'
    machine_friendly=${1}
    output=`cat -`
    if [ ${machine_friendly} -eq 1 ]
    then
        ${ECHO} "${output}"
    else
        COLUMN=`which column`
        if [ ${?} -ne 0 -o -z "${COLUMN}" ]
        then
            echo "Cannot find column utility"
            exit 1
        fi
        ${ECHO} "${output}" | tr '\t' "${SEP}" | column -xt -c 5 -s "${SEP}"
    fi
}

CWD=`dirname "${0}"`
API="$CWD/cqapi"
APITEST=`"${API}" -P`

if [ ${?} -ne 0 ]
then
    echo "Fatal: cannot find or test cqapi command" >&2
    exit 1
fi

CURLBIN=`${API} -c`
if [ ${?} -ne 0 ]
then
    echo "Fatal: cannot find curl" >&2
    exit 1
fi


# API common options
cmdapi=`    "${API}" -P ${@}`
username=`  echo "${cmdapi}" | cut -f1`
password=`  echo "${cmdapi}" | cut -f2`
instance=`  echo "${cmdapi}" | cut -f3`
passed=`    echo "${cmdapi}" | cut -f4`
apigetopts=`echo "${cmdapi}" | cut -f5`

# Custom arguments
pretty=1
machine_friendly=0
operations=""
long=0
original=0
info=0
modify=0
propery_id=
while getopts ":ljmns:v:${apigetopts}" opt; do
  case $opt in
     j)
      original=1;;
     m)
      machine_friendly=1;;
     n) 
      info=1;;
     l)
      long=1;;
     v)
      modify=1
      if [ ! -z "${property_id}" ]
      then
          operations="${operations} ${property_id}=${OPTARG}"
          property_id=""
      else
          echo "For each -v option there must be -s preceeding"\
            "option specified " >&2
          echo ""
          _usage
      fi;;
     s)
      modify=1;
      property_id="${OPTARG}";;
     \?)
      echo "Invalid option: -$OPTARG" >&2; _usage;;
     :)
      echo "Option -$OPTARG requires an argument." >&2; _usage;;
  esac
done
shift $((OPTIND-1))

if [ ${#} -gt 1 -o ${passed} -eq 0 ]
then
    _usage
fi

config_id="${1}"
if [ ${machine_friendly} -eq 1 -a ${original} -eq 1 ]
then
    echo "Switches: -j and -m cannot be applied together." >&2
    echo ""
    _usage
fi

AUTH="${username}:${password}"
config_id=`echo "${config_id}" | sed 's# #%20#g'`

view_options=$((pretty+info+machine_friendly))
if [ "${operations}" != "" -a ${view_options} -ge 1 ]
then
    echo "View options -m, -j or -n cannot be applied together " \
        "with modify operations: -s/-v" >&2
    exit 2
fi

if [ -z "${config_id}" ]
then
    _list_configurations
elif [ ${modify} -eq 0 ]
then
    _print_configuration
else
    _modify_configuration
fi


