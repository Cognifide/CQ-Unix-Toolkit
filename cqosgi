#!/bin/sh
# CQ Unix Toolkit
# Copyright (C) 2013 Cognifide Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
_usage()
{
	cat << EOT
Usage: `basename $0` [OPTION...]
Returns CQ instance OSGI bundles and its states in pretty-printed form using
instance URL. Use -j to return original JSON form. Use -m for machine

Examples:
  cqosgi -u admin                 # Returns JSON data with active workflows
                                  # from local instance
  cqosgi -i http://localhost:5510 # Returns JSON data with active workflows for
         -p secret                # localhost instance on tcp port 5510 with
                                  # password provided: secret

Options:

  -u                    use specified usernamed for connection
  -p                    use provided password for authentication
  -i                    use specified instance URL to connect
  -j                    returns workflow report in original JSON form
  -m                    returns workflow report in machine-friendly form
                        (fields separated by tabs) without header
EOT
exit 1
}


_print_preformatted()
{
    ECHO=`which echo`
    if [ $? -ne 0 -o -z "$ECHO" ]
    then
        # fallback to echo
        ECHO="echo"
    else
        ECHO="$ECHO -e "
    fi
    STATUS=$1
    machine_friendly=$2
    items=`$ECHO -e "$STATUS" | sed 's#{#\n{#g' | grep -E 'id.+name.+fragment.+stateRaw.+state.+version.+symbolicName.+category'`
    items=`$ECHO -e "$items" | sed -E 's#.*"id":([0-9]+),"name":"([^"]+)","fragment":([A-Za-z]+).*,"stateRaw":[0-9]+,"state":"([A-Za-z ]+)","version":"([^"]+)","symbolicName":"([^"]+)","category":"([^"]*)".*#\1\t\6\t\4\t\5\t\2#'`
    echo "$items"
    items_count=`$ECHO "$items"|wc -l`
    if [ $machine_friendly -eq 0 ]
    then
        $ECHO "$total bundles."
        $ECHO ""
        output="ID|SYMBOL|STATUS|VERSION|NAME|FRAGMENT|CATEGORY\n"
    fi
    output="${output}${items}"
    if [ $machine_friendly -eq 1 ]
    then
        $ECHO -n "${output}"
    else
        COLUMN=`which column`
        if [ $? -ne 0 -o -z "$COLUMN" ]
        then
            echo "Cannot find column utility"
            exit 1
        fi
        $ECHO "${output}"|tr '\t' '|'|column -xt -c 5 -s "|"
    fi
}

CWD=`dirname $0`
API="$CWD/cqapi"
APITEST=`$API -P`

if [ $? -ne 0 ]
then
	echo "Fatal: cannot find or test cqapi command" >&2
	exit 1
fi

CURLBIN=`$API -c`
if [ $? -ne 0 ]
then
	echo "Fatal: cannot find curl" >&2
	exit 1
fi


# API common options
cmdapi=`    $API -P $@`
username=`  echo "${cmdapi}" | cut -f1`
password=`  echo "${cmdapi}" | cut -f2`
instance=`  echo "${cmdapi}" | cut -f3`
passed=`    echo "${cmdapi}" | cut -f4`
apigetopts=`echo "${cmdapi}" | cut -f5`

# Custom arguments
pretty=1
machine_friendly=0
while getopts ":jm${apigetopts}" opt; do
  case $opt in
     j)
      pretty=0;;
     m)
      machine_friendly=1;;
     \?)
      echo "Invalid option: -$OPTARG" >&2; _usage;;
     :)
      echo "Option -$OPTARG requires an argument." >&2; _usage;;
  esac
done
shift $((OPTIND-1))

if [ $# -gt 0 -o $passed -eq 0 ]
then
	_usage
fi

if [ $machine_friendly -eq 1 -a $pretty -eq 0 ]
then
    echo "Switches: -j and -m cannot be applied together."
    _usage
fi

FILEPATH="/system/console/bundles/.json"
REFERER="$instance${FILEPATH}"
AUTH="$username:$password"
REFERERHEADER="Referer: $REFERER"

STATUS=`$CURLBIN \
	-s \
        --write-out "%{http_code}" \
	-u "$AUTH" \
	-H "$REFERERHEADER" \
	"$instance${FILEPATH}"`

EXITCODE=$?
$API -C $EXITCODE
if [ $EXITCODE -ne 0 ]
then
    exit $EXITCODE
fi
STATUSCODE=`echo "$STATUS"|grep -o -E '[0-9]{3}'|tail -n 1`
$API -H ${STATUSCODE}
EXITCODE2=$?
if [ $EXITCODE2 -ne 0 ]
then
    exit $EXITCODE2
fi
STATUS=`echo "$STATUS"|sed -r 's#[0-9]{3}$##'`

if [ $pretty -eq 1 ]
then
    _print_preformatted "$STATUS" $machine_friendly
else
    echo "$STATUS"
fi

